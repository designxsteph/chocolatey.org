@{
    Layout = "~/Views/Shared/MainLayout.cshtml";
    ViewBag.Title = "Installing Chocolatey";
    Bundles.Reference("Content/dist/chocolatey.slim.css");
    Bundles.Reference("Content/prism/prism.css");
    Bundles.Reference("Scripts");
    Bundles.Reference("Scripts/prism");
    Bundles.Reference("Scripts/install-steps");
}
@Html.Partial("~/Views/Shared/_Loader.cshtml")
<style>
    .nav-tabs-img .nav-link {
        display: flex;
        align-items: center;
        height: 50px;
    }

    .nav-tabs-img .nav-link .nav-img {
        width: 30px;
        margin-left: 10px;
    }
</style>
<section class="py-3 py-md-5 container">
    <h1 class="text-center mb-4">Installing Chocolatey</h1>
    <div class="bg-primary shadow p-2">
        <a class="h3 font-weight-bold collapse show" data-toggle="collapse" href="#install-step1" role="button" aria-expanded="true" aria-controls="install-step1" title="Install Step 1">Step 1: Subscribe to the Chocolatey Newsletter (Optional)</a>
    </div>
    <div class="collapse show bg-white shadow" id="install-step1">
        <div class="p-3">
            <p>Be the first to know about upcoming features, security releases, and news about Chocolatey.</p>
            <div id="mc_embed_signup">
                <form action="//chocolatey.us8.list-manage.com/subscribe/post?u=86a6d80146a0da7f2223712e4&amp;id=73b018498d" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
                    <div class="form-row align-items-center justify-content-center">
                        <div class="col-12 col-md-10">
                            <input type="email" title="Email Address for Newsletter" class="form-control email mt-2 mt-md-0" id="mce-EMAIL" placeholder="Your e-mail address" value="" name="EMAIL" required>
                        </div>
                        <div style="position: absolute; left: -5000px;">
                            <input title="Invisible Field" type="text" name="b_86a6d80146a0da7f2223712e4_73b018498d" tabindex="-1" value="">
                        </div>
                        <div class="col-12 col-md-2">
                            <button type="submit" class="btn btn-primary w-100 mt-2 mt-md-0" id="mc-embedded-subscribe"><strong>Subscribe</strong></button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="bg-primary shadow p-2 mt-4">
        <a class="h3 font-weight-bold collapse show" data-toggle="collapse" href="#install-step2" role="button" aria-expanded="true" aria-controls="install-step2" title="Install Step 2">Step 2: Choose Your Installation Method</a>
    </div>
    <div class="collapse show bg-white shadow" id="install-step2">
        <div class="p-3">
            <h4 class="mb-3">Know the Requirements:</h4>
            <ul>
                <li>Windows 7+ / Windows Server 2003+</li>
                <li>PowerShell v2+ (minimum is v3 for install from this website due to <a href="https://chocolatey.org/blog/remove-support-for-old-tls-versions">TLS 1.2 requirement</a>)</li>
                <li>.NET Framework 4+ (the installation will attempt to install .NET 4.0 if you do not have it installed)(minimum is 4.5 for install from this website due to <a href="https://chocolatey.org/blog/remove-support-for-old-tls-versions">TLS 1.2 requirement</a>)</li>
            </ul>
            <hr class="my-3" />
            <h4 class="mb-3">Chocolatey Install:</h4>


            <ul class="nav nav-tabs nav-tabs-img" role="tablist">
                <li class="nav-item">
                    <a class="nav-link" id="generic-tab" data-toggle="tab" href="#generic" role="tab" aria-controls="generic" aria-selected="false" data-deployment-method="Generic">Generic</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" id="individual-tab" data-toggle="tab" href="#individual" role="tab" aria-controls="individual" aria-selected="true" data-deployment-method="Individual">Individual</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="ansible-tab" data-toggle="tab" href="#ansible" role="tab" aria-controls="ansible" aria-selected="false" data-deployment-method="Ansible">
                        Ansible
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Ansible-red-sm.png")" alt="Ansible" title="Ansible" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="ccm-tab" data-toggle="tab" href="#ccm" role="tab" aria-controls="ccm" aria-selected="false" data-deployment-method="Chocolatey Central Management">
                        Central Management
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/logo_small.svg")" alt="Central Management" title="Central Management" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="chef-tab" data-toggle="tab" href="#chef" role="tab" aria-controls="chef" aria-selected="false" data-deployment-method="Chef">
                        Chef
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Chef-Icon.jpg")" alt="Chef" title="Chef" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="otter-tab" data-toggle="tab" href="#otter" role="tab" aria-controls="otter" aria-selected="false" data-deployment-method="Otter">
                        Otter
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Otter-Icon.jpg")" alt="Otter" title="Otter" />
                    </a>
                </li>
                <li class="nav-item"> 
                    <a class="nav-link" id="psdsc-tab" data-toggle="tab" href="#psdsc" role="tab" aria-controls="psdsc" aria-selected="false" data-deployment-method="PS DSC">
                        PS DSC
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Powershell-sm.png")" alt="PS DSC" title="PS DSC" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="puppet-tab" data-toggle="tab" href="#puppet" role="tab" aria-controls="puppet" aria-selected="false" data-deployment-method="Puppet">
                        Puppet
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Puppet-Icon.jpg")" alt="Puppet" title="Puppet" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="salt-tab" data-toggle="tab" href="#salt" role="tab" aria-controls="alt" aria-selected="false" data-deployment-method="Salt">
                        Salt
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Salt-Icon.jpg")" alt="SaltStack" title="SaltStack" />
                    </a>
                </li>
            </ul>


            <ul class="nav nav-tabs d-none" role="tablist">
                <li class="nav-item">
                    <a class="nav-link" id="organization-method-tab" data-toggle="tab" href="#organization-method" role="tab" aria-controls="organization-method" aria-selected="false"></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" id="individual-method-tab" data-toggle="tab" href="#individual-method" role="tab" aria-controls="individual-method" aria-selected="true"></a>
                </li>
            </ul>
            <ul class="nav nav-tabs nav-tabs-install-package nav-tabs-install" role="tablist">
                <li class="nav-item">
                    <a class="nav-link" id="generic-tab" data-toggle="tab" href="#generic" role="tab" aria-controls="generic" aria-selected="false" data-deployment-method="Generic">Generic</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" id="individual-tab" data-toggle="tab" href="#individual" role="tab" aria-controls="individual" aria-selected="true" data-deployment-method="Individual">Individual</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="ansible-tab" data-toggle="tab" href="#ansible" role="tab" aria-controls="ansible" aria-selected="false" data-deployment-method="Ansible">
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Ansible-red-sm.png")" alt="Ansible" title="Ansible" />
                        Ansible
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="ccm-tab" data-toggle="tab" href="#ccm" role="tab" aria-controls="ccm" aria-selected="false" data-deployment-method="Chocolatey Central Management">
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/logo_small.svg")" alt="Central Management" title="Central Management" />
                        Central Management
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="chef-tab" data-toggle="tab" href="#chef" role="tab" aria-controls="chef" aria-selected="false" data-deployment-method="Chef">
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Chef-Dark.png")" alt="Chef" title="Chef" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="otter-tab" data-toggle="tab" href="#otter" role="tab" aria-controls="otter" aria-selected="false" data-deployment-method="Otter">
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Otter-sm.png")" alt="Otter" title="Otter" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="psdsc-tab" data-toggle="tab" href="#psdsc" role="tab" aria-controls="psdsc" aria-selected="false" data-deployment-method="PS DSC">
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Powershell-sm.png")" alt="PS DSC" title="PS DSC" />
                        PS DSC
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="puppet-tab" data-toggle="tab" href="#puppet" role="tab" aria-controls="puppet" aria-selected="false" data-deployment-method="Puppet">
                        <img class="img-fluid nav-img" src="@Url.Content("~/content/images/businesses/Puppet-Dark.png")" alt="Puppet" title="Puppet" />
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="salt-tab" data-toggle="tab" href="#salt" role="tab" aria-controls="alt" aria-selected="false" data-deployment-method="Salt">
                        <img class="img-fluid" width="140" src="@Url.Content("~/content/images/businesses/Saltstack-sm.png")" alt="SaltStack" title="SaltStack" />
                    </a>
                </li>
            </ul>
            <hr class="my-4" />
            <div class="tab-content">
                @*Individual*@
                <div class="tab-pane fade show active" id="individual-method" role="tabpanel" aria-labelledby="individual-method-tab">
                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="individual" role="tabpanel" aria-labelledby="individual-tab">
                            <ol class="mb-0">
                                <li class="mb-3">First, ensure that you are using an <strong><em><a href="http://www.howtogeek.com/194041/how-to-open-the-command-prompt-as-administrator-in-windows-8.1/">administrative shell</a></em></strong> - you can also install as a non-admin, check out <a href="@Url.RouteUrl(RouteName.Docs, new {docName = "installation"})#non-administrative-install">Non-Administrative Installation</a>.</li>
                                <li class="mb-3">
                                    <p>Install with powershell.exe</p>
                                    <div class="callout-secondary callout bg-light">
                                        <p>
                                            &#128221; <strong>NOTE:</strong> Please inspect <a href="https://chocolatey.org/install.ps1" class="uri">https://chocolatey.org/install.ps1</a> prior to running any of these scripts to ensure safety. We already know it's safe, but you should verify the security and contents of <strong><em>any</em></strong> script from the internet you are not familiar with.
                                            All of these scripts download a remote PowerShell script and execute it on your machine. We take security very seriously. <a href="https://chocolatey.org/security">Learn more about our security protocols</a>.
                                            </p>
                                    </div>
                                    <p>With PowerShell, you must ensure <a href="https://go.microsoft.com/fwlink/?LinkID=135170">Get-ExecutionPolicy</a> is not Restricted. We suggest using <code>Bypass</code> to bypass the policy to get things installed or <code>AllSigned</code> for quite a bit more security.</p>
                                    <ul>
                                        <li class="mb-3">Run <code>Get-ExecutionPolicy</code>. If it returns <code>Restricted</code>, then run <code>Set-ExecutionPolicy AllSigned</code> or <code>Set-ExecutionPolicy Bypass -Scope Process</code>.</li>
                                    </ul>
                                    <p>Now run the following command:</p>
                                    <div class="input-group">
                                        <input type="text" class="form-control"
                                               value="Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))"
                                               aria-label="Install with powershell.exe command"
                                               readonly>
                                        <div class="input-group-append">
                                            <button class="btn btn-primary tt"
                                                    aria-label="Copy Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;)) to Clipboard"
                                                    data-toggle="tooltip"
                                                    title="Copy to Clipboard"
                                                    data-clipboard-text="Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))">
                                                <i class="fas fa-clipboard" aria-hidden="true">
                                                    <span class="sr-only">
                                                        Copy Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;)) to Clipboard
                                                    </span>
                                                </i>
                                            </button>
                                        </div>
                                    </div>
                                </li>
                                <li class="mb-3">Paste the copied text into your shell and press Enter.</li>
                                <li class="mb-3">Wait a few seconds for the command to complete.</li>
                                <li>If you don't see any errors, you are ready to use Chocolatey! Type <code>choco</code> or <code>choco -?</code> now, or see <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "getting-started" })">Getting Started</a> for usage instructions.</li>
                            </ol>
                        </div>
                    </div>
                </div>
                @*Organization*@
                <div class="tab-pane fade show" id="organization-method" role="tabpanel" aria-labelledby="organization-method-tab">
                    <h3 class="mb-4 text-center d-none deployment-method-header">Deployment Method: <span></span></h3>
                    <div class="callout callout-secondary bg-light">
                        <p>&#128221; <strong>NOTE:</strong> This applies to both open source and commercial editions of Chocolatey.</p>
                    </div>
                    <h3>1. Enter Your Internal Repository Url</h3>
                    @Html.Partial("~/Views/Packages/_RepositoryUrlInput.cshtml")
                    <hr class="my-4" />
                    <h3>2. Setup Your Environment</h3>
                    <div class="ml-30">
                        <h4>1. Ensure you are set for organizational deployment</h4>
                        <p>Please see the <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "how-to-setup-offline-installation" })">organizational deployment guide</a></p>
                        <h4>2. Get the package into your environment</h4>
                        @*Option 1*@
                        <a class="h5 collapsed d-block" data-toggle="collapse" href="#install-step2-option1" role="button" aria-expanded="false" aria-controls="install-step2-option1" title="Install Step 2 Option 1">Option 1: Cached Package (Unreliable, Requires Internet - Same As Community)</a>
                        <div class="collapse" id="install-step2-option1">
                            <ul>
                                <li>
                                    Open Source or Commercial:
                                    <ul>
                                        <li>Proxy Repository - Create a proxy nuget repository on Nexus, Artifactory Pro, or a proxy Chocolatey repository on ProGet. Point your upstream to <strong>https://chocolatey.org/api/v2</strong>. Packages cache on first access automatically. Make sure your choco clients are using your proxy repository as a source and NOT the default community repository. See <a href="@Url.RouteUrl(RouteName.Docs, new {docName = "commands-sources"})">source command</a> for more information.</li>
                                    </ul>
                                </li>
                            </ul>
                        </div>
                        @*Option 2*@
                        <a class="h5 mt-3 collapsed d-block" data-toggle="collapse" href="#install-step2-option2" role="button" aria-expanded="false" aria-controls="install-step2-option1" title="Install Step 2 Option 2">Option 2: Internalized Package (Reliable, Scalable)</a>
                        <div class="collapse" id="install-step2-option2">
                            <ul>
                                <li>
                                    Open Source
                                    <ul>
                                        <li><a href="@Url.RouteUrl(RouteName.Docs, new {docName = "how-to-recompile-packages"})">Follow manual internalization instructions</a></li>
                                    </ul>
                                </li>
                                <li>
                                    Package Internalizer (C4B)
                                    <ul>
                                        <li>
                                            Run <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "commands-download" })">(additional options)</a>
                                        </li>
                                        <li>
                                            For package dependencies, run:
                                            <div class="contains-internal-repo-url copy-command">
<pre class="line-numbers language-powershell border py-3"><code class="command-environment-two">choco push --source=&quot;'INTERNAL REPO URL'&quot;</code></pre>
                                            </div>
                                        </li>
                                        <li><a href="@Url.RouteUrl(RouteName.Docs, new { docName = "how-to-setup-internal-package-repository" })">Automate package internalization</a></li>
                                    </ul>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <hr class="my-4" />
                    <div class="tab-content">
                        <h3>3. Copy Your Script</h3>
                        <div class="tab-pane fade" id="generic" role="tabpanel" aria-labelledby="generic-tab">
                            <a class="h5 collapsed d-block" data-toggle="collapse" href="#install-step4" role="button" aria-expanded="false" aria-controls="install-step4" title="Step 4">1. Save this installation script</a>
                            <div class="collapse" id="install-step4">
                                <p>Save the following as ChocolateyInstall.ps1:</p>
                                <div class="contains-internal-repo-url copy-command">
<pre class="language-powershell border py-3"><code>
# Download and install Chocolatey nupkg from an OData (HTTP/HTTPS) url such as Artifactory, Nexus, ProGet (all of these are recommended for organizational use), or Chocolatey.Server (great for smaller organizations and POCs)
# This is where you see the top level API - with xml to Packages - should look nearly the same as https://chocolatey.org/api/v2/
# If you are using Nexus, always add the trailing slash or it won't work
# === EDIT HERE ===
$packageRepo = 'INTERNAL REPO URL'

# If the above $packageRepo repository requires authentication, add the username and password here. Otherwise these leave these as empty strings.
$repoUsername = ''    # this must be empty is NOT using authentication
$repoPassword = ''    # this must be empty if NOT using authentication

# Determine unzipping method
# 7zip is the most compatible, but you need an internally hosted 7za.exe.
# Make sure the version matches for the arguments as well.
# Built-in does not work with Server Core, but if you have PowerShell 5
# it uses Expand-Archive instead of COM
$unzipMethod = 'builtin'
#$unzipMethod = '7zip'
#$7zipUrl = 'https://chocolatey.org/7za.exe' (download this file, host internally, and update this to internal)

# === ENVIRONMENT VARIABLES YOU CAN SET ===
# Prior to running this script, in a PowerShell session, you can set the
# following environment variables and it will affect the output

# - $env:ChocolateyEnvironmentDebug = 'true' # see output
# - $env:chocolateyIgnoreProxy = 'true' # ignore proxy
# - $env:chocolateyProxyLocation = '' # explicit proxy
# - $env:chocolateyProxyUser = '' # explicit proxy user name (optional)
# - $env:chocolateyProxyPassword = '' # explicit proxy password (optional)

# === NO NEED TO EDIT ANYTHING BELOW THIS LINE ===
# Ensure we can run everything
Set-ExecutionPolicy Bypass -Scope Process -Force;

# If the repository requires authentication, create the Credential object
if ((-not [string]::IsNullOrEmpty($repoUsername)) -and (-not [string]::IsNullOrEmpty($repoPassword))) {
$securePassword = ConvertTo-SecureString $repoPassword -AsPlainText -Force
$repoCreds = New-Object System.Management.Automation.PSCredential ($repoUsername, $securePassword)
}

$searchUrl = ($packageRepo.Trim('/'), 'Packages()?$filter=(Id%20eq%20%27chocolatey%27)%20and%20IsLatestVersion') -join '/'

# Reroute TEMP to a local location
New-Item $env:ALLUSERSPROFILE\choco-cache -ItemType Directory -Force
$env:TEMP = "$env:ALLUSERSPROFILE\choco-cache"

$localChocolateyPackageFilePath = Join-Path $env:TEMP 'chocolatey.nupkg'
$ChocoInstallPath = "$($env:SystemDrive)\ProgramData\Chocolatey\bin"
$env:ChocolateyInstall = "$($env:SystemDrive)\ProgramData\Chocolatey"
$env:Path += ";$ChocoInstallPath"
$DebugPreference = 'Continue';

# PowerShell v2/3 caches the output stream. Then it throws errors due
# to the FileStream not being what is expected. Fixes "The OS handle's
# position is not what FileStream expected. Do not use a handle
# simultaneously in one FileStream and in Win32 code or another
# FileStream."
function Fix-PowerShellOutputRedirectionBug {
$poshMajorVerion = $PSVersionTable.PSVersion.Major

if ($poshMajorVerion -lt 4) {
try{
# http://www.leeholmes.com/blog/2008/07/30/workaround-the-os-handles-position-is-not-what-filestream-expected/ plus comments
$bindingFlags = [Reflection.BindingFlags] "Instance,NonPublic,GetField"
$objectRef = $host.GetType().GetField("externalHostRef", $bindingFlags).GetValue($host)
$bindingFlags = [Reflection.BindingFlags] "Instance,NonPublic,GetProperty"
$consoleHost = $objectRef.GetType().GetProperty("Value", $bindingFlags).GetValue($objectRef, @@())
[void] $consoleHost.GetType().GetProperty("IsStandardOutputRedirected", $bindingFlags).GetValue($consoleHost, @@())
$bindingFlags = [Reflection.BindingFlags] "Instance,NonPublic,GetField"
$field = $consoleHost.GetType().GetField("standardOutputWriter", $bindingFlags)
$field.SetValue($consoleHost, [Console]::Out)
[void] $consoleHost.GetType().GetProperty("IsStandardErrorRedirected", $bindingFlags).GetValue($consoleHost, @@())
$field2 = $consoleHost.GetType().GetField("standardErrorWriter", $bindingFlags)
$field2.SetValue($consoleHost, [Console]::Error)
} catch {
Write-Output 'Unable to apply redirection fix.'
}
}
}

Fix-PowerShellOutputRedirectionBug

# Attempt to set highest encryption available for SecurityProtocol.
# PowerShell will not set this by default (until maybe .NET 4.6.x). This
# will typically produce a message for PowerShell v2 (just an info
# message though)
try {
# Set TLS 1.2 (3072), then TLS 1.1 (768), then TLS 1.0 (192)
# Use integers because the enumeration values for TLS 1.2 and TLS 1.1 won't
# exist in .NET 4.0, even though they are addressable if .NET 4.5+ is
# installed (.NET 4.5 is an in-place upgrade).
[System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192
} catch {
Write-Output 'Unable to set PowerShell to use TLS 1.2 and TLS 1.1 due to old .NET Framework installed. If you see underlying connection closed or trust errors, you may need to upgrade to .NET Framework 4.5+ and PowerShell v3+.'
}

function Get-Downloader {
param (
[string]$url
)
$downloader = new-object System.Net.WebClient

$defaultCreds = [System.Net.CredentialCache]::DefaultCredentials
if (Test-Path -Path variable:repoCreds) {
Write-Debug "Using provided repository authentication credentials."
$downloader.Credentials = $repoCreds
} elseif ($defaultCreds -ne $null) {
Write-Debug "Using default repository authentication credentials."
$downloader.Credentials = $defaultCreds
}

$ignoreProxy = $env:chocolateyIgnoreProxy
if ($ignoreProxy -ne $null -and $ignoreProxy -eq 'true') {
Write-Debug 'Explicitly bypassing proxy due to user environment variable.'
$downloader.Proxy = [System.Net.GlobalProxySelection]::GetEmptyWebProxy()
} else {
# check if a proxy is required
$explicitProxy = $env:chocolateyProxyLocation
$explicitProxyUser = $env:chocolateyProxyUser
$explicitProxyPassword = $env:chocolateyProxyPassword
if ($explicitProxy -ne $null -and $explicitProxy -ne '') {
# explicit proxy
$proxy = New-Object System.Net.WebProxy($explicitProxy, $true)
if ($explicitProxyPassword -ne $null -and $explicitProxyPassword -ne '') {
$passwd = ConvertTo-SecureString $explicitProxyPassword -AsPlainText -Force
$proxy.Credentials = New-Object System.Management.Automation.PSCredential ($explicitProxyUser, $passwd)
}

Write-Debug "Using explicit proxy server '$explicitProxy'."
$downloader.Proxy = $proxy

} elseif (!$downloader.Proxy.IsBypassed($url)) {
# system proxy (pass through)
$creds = $defaultCreds
if ($creds -eq $null) {
Write-Debug 'Default credentials were null. Attempting backup method'
$cred = get-credential
$creds = $cred.GetNetworkCredential();
}

$proxyaddress = $downloader.Proxy.GetProxy($url).Authority
Write-Debug "Using system proxy server '$proxyaddress'."
$proxy = New-Object System.Net.WebProxy($proxyaddress)
$proxy.Credentials = $creds
$downloader.Proxy = $proxy
}
}

return $downloader
}

function Download-File {
param (
[string]$url,
[string]$file
)
$downloader = Get-Downloader $url
$downloader.DownloadFile($url, $file)
}

function Download-Package {
param (
[string]$packageODataSearchUrl,
[string]$file
)
$downloader = Get-Downloader $packageODataSearchUrl

Write-Output "Querying latest package from $packageODataSearchUrl"
[xml]$pkg = $downloader.DownloadString($packageODataSearchUrl)
$packageDownloadUrl = $pkg.feed.entry.content.src

Write-Output "Downloading $packageDownloadUrl to $file"
$downloader.DownloadFile($packageDownloadUrl, $file)
}

function Install-ChocolateyFromPackage {
param (
[string]$chocolateyPackageFilePath = ''
)

if ($chocolateyPackageFilePath -eq $null -or $chocolateyPackageFilePath -eq '') {
throw "You must specify a local package to run the local install."
}

if (!(Test-Path($chocolateyPackageFilePath))) {
throw "No file exists at $chocolateyPackageFilePath"
}

$chocTempDir = Join-Path $env:TEMP "chocolatey"
$tempDir = Join-Path $chocTempDir "chocInstall"
if (![System.IO.Directory]::Exists($tempDir)) {[System.IO.Directory]::CreateDirectory($tempDir)}
$file = Join-Path $tempDir "chocolatey.zip"
Copy-Item $chocolateyPackageFilePath $file -Force

# unzip the package
Write-Output "Extracting $file to $tempDir..."
if ($unzipMethod -eq '7zip') {
$7zaExe = Join-Path $tempDir '7za.exe'
if (-Not (Test-Path ($7zaExe))) {
Write-Output 'Downloading 7-Zip commandline tool prior to extraction.'
# download 7zip
Download-File $7zipUrl "$7zaExe"
}

$params = "x -o`"$tempDir`" -bd -y `"$file`""
# use more robust Process as compared to Start-Process -Wait (which doesn't
# wait for the process to finish in PowerShell v3)
$process = New-Object System.Diagnostics.Process
$process.StartInfo = New-Object System.Diagnostics.ProcessStartInfo($7zaExe, $params)
$process.StartInfo.RedirectStandardOutput = $true
$process.StartInfo.UseShellExecute = $false
$process.StartInfo.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
$process.Start() | Out-Null
$process.BeginOutputReadLine()
$process.WaitForExit()
$exitCode = $process.ExitCode
$process.Dispose()

$errorMessage = "Unable to unzip package using 7zip. Perhaps try setting `$env:chocolateyUseWindowsCompression = 'true' and call install again. Error:"
switch ($exitCode) {
0 { break }
1 { throw "$errorMessage Some files could not be extracted" }
2 { throw "$errorMessage 7-Zip encountered a fatal error while extracting the files" }
7 { throw "$errorMessage 7-Zip command line error" }
8 { throw "$errorMessage 7-Zip out of memory" }
255 { throw "$errorMessage Extraction cancelled by the user" }
default { throw "$errorMessage 7-Zip signalled an unknown error (code $exitCode)" }
}
} else {
if ($PSVersionTable.PSVersion.Major -lt 5) {
try {
$shellApplication = new-object -com shell.application
$zipPackage = $shellApplication.NameSpace($file)
$destinationFolder = $shellApplication.NameSpace($tempDir)
$destinationFolder.CopyHere($zipPackage.Items(),0x10)
} catch {
throw "Unable to unzip package using built-in compression. Set `$env:chocolateyUseWindowsCompression = 'false' and call install again to use 7zip to unzip. Error: `n $_"
}
} else {
Expand-Archive -Path "$file" -DestinationPath "$tempDir" -Force
}
}

# Call Chocolatey install
Write-Output 'Installing chocolatey on this machine'
$toolsFolder = Join-Path $tempDir "tools"
$chocInstallPS1 = Join-Path $toolsFolder "chocolateyInstall.ps1"

& $chocInstallPS1

Write-Output 'Ensuring chocolatey commands are on the path'
$chocInstallVariableName = 'ChocolateyInstall'
$chocoPath = [Environment]::GetEnvironmentVariable($chocInstallVariableName)
if ($chocoPath -eq $null -or $chocoPath -eq '') {
$chocoPath = 'C:\ProgramData\Chocolatey'
}

$chocoExePath = Join-Path $chocoPath 'bin'

if ($($env:Path).ToLower().Contains($($chocoExePath).ToLower()) -eq $false) {
$env:Path = [Environment]::GetEnvironmentVariable('Path',[System.EnvironmentVariableTarget]::Machine);
}

Write-Output 'Ensuring chocolatey.nupkg is in the lib folder'
$chocoPkgDir = Join-Path $chocoPath 'lib\chocolatey'
$nupkg = Join-Path $chocoPkgDir 'chocolatey.nupkg'
if (!(Test-Path $nupkg)) {
Write-Output 'Copying chocolatey.nupkg is in the lib folder'
if (![System.IO.Directory]::Exists($chocoPkgDir)) { [System.IO.Directory]::CreateDirectory($chocoPkgDir); }
Copy-Item "$file" "$nupkg" -Force -ErrorAction SilentlyContinue
}
}

# Idempotence - do not install Chocolatey if it is already installed
if (!(Test-Path $ChocoInstallPath)) {
# download the package to the local path
if (!(Test-Path $localChocolateyPackageFilePath)) {
Download-Package $searchUrl $localChocolateyPackageFilePath
}

# Install Chocolatey
Install-ChocolateyFromPackage $localChocolateyPackageFilePath
}
</code></pre>
                                </div>
                            </div>
                            <h5 class="mt-4">2. Make script accessible by internal url</h5>
                            <p>Put the script somewhere internally that can be accessed by a url (like a raw/binary repository in Nexus, Artifactory, or ProGet). Do NOT put the script on a NuGet type repository (where your packages will be), create a new Raw/Binary repository.</p>
                            <h5 class="mt-4">3. Install/Deploy Chocolatey internally </h5>
                            <p>Now you can do similar to the individual side, but your command will be something like:</p>
<pre class="language-powershell border py-3"><code>
Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('http://internal_raw_url/ChocolateyInstall.ps1'))
</code></pre>
                        </div>
                        <div class="tab-pane fade" id="ansible" role="tabpanel" aria-labelledby="ansible-tab">
                            <p>1. Follow the steps in the Generic tab, you will need to have finished getting a script ready and accessible over a url to complete this part.</p>
                            <p>2. Add the following to your playbook:</p>
                            <div class="contains-internal-repo-url copy-command">
<pre class="line-numbers language-yaml line-numbers border py-3"><code class="command-organization-ansible">
- name: Ensure Chocolatey installed from internal repo
  win_chocolatey:
    name: chocolatey
    state: present
    source: http://script/url/from/generic/tab/ChocolateyInstall.ps1
</code></pre>
                            </div>
                            <p>See docs at <a href="https://docs.ansible.com/ansible/latest/modules/win_chocolatey_module.html" target="_blank" rel="noreferrer">https://docs.ansible.com/ansible/latest/modules/win_chocolatey_module.html</a>.</p>
                        </div>
                        <div class="tab-pane fade" id="ccm" role="tabpanel" aria-labelledby="ccm-tab">
                            <p>Coming in 2020! Central Managment Reporting available now! <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "features-chocolatey-central-management" })">More information...</a></p>
                        </div>
                        <div class="tab-pane fade" id="chef" role="tabpanel" aria-labelledby="chef-tab">
                            <div class="contains-internal-repo-url copy-command">
<pre class="language-ruby line-numbers border py-3"><code class="command-organization-chef">
# Note: `chocolateyDownloadUrl is completely different than normal
#  source locations. This is directly to the bare download url for the
#  chocolatey.nupkg, similar to what you see when you browse to
#  https://chocolatey.org/api/v2/package/chocolatey
node['chocolatey']['install_vars']['chocolateyDownloadUrl'] = 'INTERNAL REPO URL/check_this/chocolatey.VERSION.nupkg'
node['chocolatey']['upgrade'] = true
include_recipe 'chocolatey::default'
</code></pre>
                            </div>
                            <p>The install of Chocolatey is separate from the Chef built-in resources. You will need the <a href="https://supermarket.chef.io/cookbooks/chocolatey/" target="_blank" rel="noreferrer">Chocolatey Cookbook</a>.</p>
                        </div>
                        <div class="tab-pane fade" id="otter" role="tabpanel" aria-labelledby="otter-tab">
                            <p>Check back later for this!</p>
                            <p>Requires Otter Chocolatey Extension. See docs at <a href="https://inedo.com/den/otter/chocolatey" target="_blank" rel="noreferrer">https://inedo.com/den/otter/chocolatey</a>.</p>
                        </div>
                        <div class="tab-pane fade" id="psdsc" role="tabpanel" aria-labelledby="psdsc-tab">
                            <div class="contains-internal-repo-url copy-command">
<pre class="language-powershell line-numbers border py-3"><code class="command-organization-psdsc">
cChocoInstaller InstallChocolatey{
  InstallDir            = "C:\ProgramData\chocolatey"
  ChocoInstallScriptUrl = "http://script/url/from/generic/tab/ChocolateyInstall.ps1"
}
</code></pre>
                            </div>
                            <p>Requires cChoco DSC Resource. See docs at <a href="https://github.com/chocolatey/cChoco" target="_blank" rel="noreferrer">https://github.com/chocolatey/cChoco</a>.</p>
                        </div>
                        <div class="tab-pane fade" id="puppet" role="tabpanel" aria-labelledby="puppet-tab">
                            <div class="contains-internal-repo-url copy-command">
<pre class="language-puppet line-numbers border py-3"><code class="command-organization-puppet">
## Note: `chocolatey_download_url is completely different than normal
##  source locations. This is directly to the bare download url for the
##  chocolatey.nupkg, similar to what you see when you browse to
##  https://chocolatey.org/api/v2/package/chocolatey
class {'chocolatey':
  chocolatey_download_url => 'INTERNAL REPO URL/check_this/chocolatey.VERSION.nupkg',
  use_7zip                => false,
}
</code></pre>
                            </div>
                            <p>Requires Puppet Chocolatey Provider module. See docs at <a href="https://forge.puppet.com/puppetlabs/chocolatey" target="_blank" rel="noreferrer">https://forge.puppet.com/puppetlabs/chocolatey</a>.</p>
                        </div>
                        <div class="tab-pane fade" id="salt" role="tabpanel" aria-labelledby="salt-tab">
                            <p>Check back later for this!</p>
                            <p>See docs at <a href="https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.chocolatey.html" target="_blank" rel="noreferrer">https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.chocolatey.html</a>.</p>
                        </div>
                    </div>
                    <hr class="my-4" />
                    <h3>4. If applicable - Chocolatey configuration/installation</h3>
                    <p>See <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "features-infrastructure-automation" })#chocolatey-integration-implementation-with-common-configuration-managers">infrastructure management matrix</a> for Chocolatey configuration elements and examples.</p>
                    <hr class="my-4" />
                    <h4>NOTES:</h4>
                    <ul>
                        <li>
                            Use of the community repository directly, even to install Chocolatey is not recommended for organizational use - in fact <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "community-packages-disclaimer" })#rate-limiting">rate limiting</a> is in place to ensure the stability of the community package repository.
                            Downloading/installing the Chocolatey package itself is rate limited to 5 times per minute, with a one hour lockout. Following these instructions will ensure you don't get yourself into trouble when you deploy.
                        </li>
                        <li>
                            There are methods to achieve similar to what you may have seen using the community repository personally. See the <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "how-to-setup-offline-installation" })">organizational deployment guide</a>
                            and <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "community-packages-disclaimer" })">community packages - how to avoid excessive use</a> for more information.
                        </li>
                        <li>
                            Make sure you subscribe to <a href="https://groups.google.com/group/chocolatey-announce" target="_blank" rel="noreferrer">chocolatey-announce</a> to learn when new versions are available!
                        </li>
                    </ul>
                </div>
                <hr class="my-4" />
                <h4 class="mb-3">Chocolatey Licensed Install:</h4>
                <p>Are you also installing a commercial edition of Chocolatey?</p>
                <p>Please see <a href="@Url.RouteUrl(RouteName.Docs, new { docName = "installation-licensed" })">Install the Licensed Edition</a>.</p>

                <hr class="my-4" />
                <h4 class="mb-3">Advanced Chocolatey Install:</h4>
                <p>Are you installing behind a proxy, need a completely offline install, or wanting to install a licenced edition of Chocolatey? Need even more options? Visit our Documentation or take our new Installation Course to help you get up and running with Chocolatey!</p>
                <div class="row divider-row">
                    <div class="col-lg-6">
                        <hr class="d-lg-none" />
                        <h5 class="mb-3"><small>Option 1:</small><br />Read the Documentation</h5>
                        <a class="btn btn-primary" href="@Url.RouteUrl(RouteName.Docs, new {docName = "installation"})#more-install-options">Read the Installation Docs</a>
                    </div>
                    <div class="col-lg-6">
                        <h5 class="mb-3"><small>Option 2:</small><br />Take the step-by-step Installation Course<span class="badge badge-success ml-2">New!</span></h5>
                        <a class="btn btn-primary" href="@Url.RouteUrl(RouteName.CourseName, new { courseName= "installation", courseModuleName = "installing"})">Take the Installation Course</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
